{"searchDocs":[{"title":"Installation","type":0,"sectionRef":"#","url":"/TypedEnum/docs/Installation","content":"","keywords":"","version":"Next"},{"title":"Option №1 (Creator Store)​","type":1,"pageTitle":"Installation","url":"/TypedEnum/docs/Installation#option-1-creator-store","content":" Creator Store Module  ","version":"Next","tagName":"h2"},{"title":"Option №2 (GitHub)​","type":1,"pageTitle":"Installation","url":"/TypedEnum/docs/Installation#option-2-github","content":" Get the latest .rbxm (or .luau) file from GitHub releases and insert it into Roblox Studio.  ","version":"Next","tagName":"h2"},{"title":"Option №3 (Wally)​","type":1,"pageTitle":"Installation","url":"/TypedEnum/docs/Installation#option-3-wally","content":" Add TypedEnum to wally.toml dependencies in your project: [dependencies] typedenum = &quot;arythmitical/typedenum@1.0.4&quot; Install dependencies using terminal: wally install  ","version":"Next","tagName":"h2"},{"title":"Intro","type":0,"sectionRef":"#","url":"/TypedEnum/docs/intro","content":"Intro Welcome to the documentation of TypedEnum! Quick start: InstallationCreating EnumsAPI reference","keywords":"","version":"Next"},{"title":"Creating Enums","type":0,"sectionRef":"#","url":"/TypedEnum/docs/Creating_Enums","content":"","keywords":"","version":"Next"},{"title":"Creating TypedEnum​","type":1,"pageTitle":"Creating Enums","url":"/TypedEnum/docs/Creating_Enums#creating-typedenum","content":" A new TypedEnum is created using TypedEnum.new. It accepts a constructor function, that is supposed to:  create a new enum table (the one that will store items)add items to the enum using the provided add function  Here's an example:  local MyEnum = TypedEnum.new(function(add) return { MyItem = add(&quot;MyItem&quot;, 1) } end)   We just created a new enum named MyEnum, with an item named MyItem. Now this enum can be used anywhere:  local myValue = MyEnum.Item print(myValue.Name) -- &quot;MyItem&quot;   This particular way of creating custom enums allowstype inference engineto properly work, and thus gives full autocompletion support!  ","version":"Next","tagName":"h2"},{"title":"Type annotations​","type":1,"pageTitle":"Creating Enums","url":"/TypedEnum/docs/Creating_Enums#type-annotations","content":" TypedEnum also provides some publictype annotations that you can use.  local MyEnum = TypedEnum.new(function(add) return { EnumItem1 = add(&quot;EnumItem1&quot;, 1), EnumItem2 = add(&quot;EnumItem2&quot;, 2), EnumItem3 = add(&quot;EnumItem3&quot;, 3) } end) export type MyEnum = TypedEnum.TypedEnumItem&lt;number, typeof(MyEnum)&gt;   In the code above, we defined a type MyEnum. It represents all enum items in MyEnum: EnumItem1, EnumItem2 and EnumItem3:  local myValue: MyEnum = MyEnum.EnumItem1 -- ok local myValue: MyEnum = MyEnum.EnumItem2 -- ok local myValue: MyEnum = MyEnum.EnumItem3 -- ok local myValue: MyEnum = 123 -- not ok local myValue: MyEnum = Enum.AccessoryType.Hat -- not ok local myValue: MyEnum = MyEnum -- not ok   ","version":"Next","tagName":"h2"},{"title":"Enums module​","type":1,"pageTitle":"Creating Enums","url":"/TypedEnum/docs/Creating_Enums#enums-module","content":" In general, it's a good practice to keep all static data in one place, and it's recommended to have all enums located in a single Enums module, like this:  -- Enums.luau local Enums = table.freeze({ Status = TypedEnum.new(function(add) return { Confusion = add(&quot;Confusion&quot;, 1), Poison = add(&quot;Poison&quot;, 2) } end), }) export type Status = TypedEnum.TypedEnumItem&lt;number, typeof(Enums.Status)&gt; return Enums   Now, you can use this enum from another script:  -- Example.luau local Enums = require(path.to.Enums) local myStatus: Enums.Status = Enums.Status.Confusion -- wowie!   ","version":"Next","tagName":"h2"},{"title":"What's next?​","type":1,"pageTitle":"Creating Enums","url":"/TypedEnum/docs/Creating_Enums#whats-next","content":" You can check out the API referenceto learn more about TypedEnum.  Happy coding! ","version":"Next","tagName":"h2"},{"title":"TypedEnumItem","type":0,"sectionRef":"#","url":"/TypedEnum/api/TypedEnumItem","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"TypedEnumItem","url":"/TypedEnum/api/TypedEnumItem#types","content":" ","version":null,"tagName":"h2"},{"title":"TypedEnumItem<T,enum>​","type":1,"pageTitle":"TypedEnumItem","url":"/TypedEnum/api/TypedEnumItem#TypedEnumItem<T,enum>","content":"&lt;/&gt; type TypedEnumItem&lt;T,enum&gt; = { Name: string, Value: T, Enum: enum } The type annotation of TypedEnumItem. Type argument T defines what type of value is in this item. Type argument enum defines the TypedEnum that this TypedEnumItem belongs to. Example: local PlayerLocation = TypedEnum.new(function(add) return { MainMenu = add(&quot;MainMenu&quot;, 1), InRound = add(&quot;InRound&quot;, 2), Shop = add(&quot;Shop&quot;, 3) } end) local item: TypedEnumItem&lt;number, typeof(PlayerLocation)&gt; = PlayerLocation.MainMenu -- valid local item: TypedEnumItem&lt;number, typeof(PlayerLocation)&gt; = PlayerLocation.Shop -- valid local item: TypedEnumItem&lt;string, typeof(SomeOtherEnum)&gt; = PlayerLocation.Shop -- invalid  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"TypedEnumItem","url":"/TypedEnum/api/TypedEnumItem#properties","content":" ","version":null,"tagName":"h2"},{"title":"Name​","type":1,"pageTitle":"TypedEnumItem","url":"/TypedEnum/api/TypedEnumItem#Name","content":"&lt;/&gt; TypedEnumItem.Name: string The name of the item. Example: local MyEnum = TypedEnum.new(function(add) return { MyItem = add(&quot;MyItem&quot;, 1) } end) print(MyEnum.MyItem.Name) -- MyItem   ","version":null,"tagName":"h3"},{"title":"Value​","type":1,"pageTitle":"TypedEnumItem","url":"/TypedEnum/api/TypedEnumItem#Value","content":"&lt;/&gt; TypedEnumItem.Value: any The value that the item holds. The type of the value should be the same across all items in a TypedEnum. Example: local MyEnum = TypedEnum.new(function(add) return { MyItem = add(&quot;MyItem&quot;, 1) } end) print(MyEnum.MyItem.Value) -- 1   ","version":null,"tagName":"h3"},{"title":"Enum​","type":1,"pageTitle":"TypedEnumItem","url":"/TypedEnum/api/TypedEnumItem#Enum","content":"&lt;/&gt; TypedEnumItem.Enum: TypedEnum The TypedEnum that the item belongs to. Example: local MyEnum = TypedEnum.new(function(add) return { MyItem = add(&quot;MyItem&quot;, 1) } end) print(MyEnum.MyItem.Enum == MyEnum) -- true  ","version":null,"tagName":"h3"},{"title":"TypedEnum","type":0,"sectionRef":"#","url":"/TypedEnum/api/TypedEnum","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"TypedEnum","url":"/TypedEnum/api/TypedEnum#types","content":" ","version":null,"tagName":"h2"},{"title":"TypedEnum<T>​","type":1,"pageTitle":"TypedEnum","url":"/TypedEnum/api/TypedEnum#TypedEnum<T>","content":"&lt;/&gt; type TypedEnum&lt;T&gt; = { [string]: TypedEnumItem&lt;T, TypedEnum&lt;T&gt;&gt; } TypedEnum's type. The type argument T defines what kind of values are in items of this enum. Example: local PlayerLocation = TypedEnum.new(function(add) return { MainMenu = add(&quot;MainMenu&quot;, 1), InRound = add(&quot;InRound&quot;, 2), Shop = add(&quot;Shop&quot;, 3) } end) local enum: TypedEnum&lt;number&gt; = PlayerLocation -- valid local enum: TypedEnum&lt;string&gt; = PlayerLocation -- invalid  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"TypedEnum","url":"/TypedEnum/api/TypedEnum#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"TypedEnum","url":"/TypedEnum/api/TypedEnum#new","content":"&lt;/&gt; TypedEnum.new(constructor: (add: ( string, T ) → (TypedEnumItem)) → TypedEnum&lt;T&gt;) → TypedEnum&lt;T&gt; Construct a new TypedEnum using the provided constructor function. Example: local PlayerLocation = TypedEnum.new(function(add) return { MainMenu = add(&quot;MainMenu&quot;, 1), InRound = add(&quot;InRound&quot;, 2), Shop = add(&quot;Shop&quot;, 3) } end)   ","version":null,"tagName":"h3"},{"title":"fromValue​","type":1,"pageTitle":"TypedEnum","url":"/TypedEnum/api/TypedEnum#fromValue","content":"&lt;/&gt; TypedEnum.fromValue( enum: TypedEnum&lt;T&gt;,-- the enum to search in value: T? ) → TypedEnumItem&lt;T,TypedEnum&lt;T&gt;&gt;? Returns a TypedEnumItem that has the given value. Example: local PlayerLocation = TypedEnum.new(function(add) return { MainMenu = add(&quot;MainMenu&quot;, 1), InRound = add(&quot;InRound&quot;, 2), Shop = add(&quot;Shop&quot;, 3) } end) local plrLocation = TypedEnum.fromValue(PlayerLocation, 1) print(plrLocation.Name) -- MainMenu  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}